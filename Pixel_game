import pygame
from sys import exit
from random import randint

pygame.init()
screen = pygame.display.set_mode((1000, 500))
pygame.display.set_caption('Pixel game')
clock = pygame.time.Clock()


def obstacle_movement(obstacle_list):
    if obstacle_list:
        for obstacle_rect in obstacle_list:
            obstacle_rect.x -= 5
            if obstacle_rect.y > 210:
                screen.blit(snail, obstacle_rect)
            else:
                screen.blit(bird, obstacle_rect)

        obstacle_list = [obstacle for obstacle in obstacle_list if obstacle.x > - 200]
        return obstacle_list
    else:
        return []


def display_score():
    current_time = pygame.time.get_ticks() - start_time
    current_time = current_time // 1000
    score_surf = text_font.render(f'Score: {current_time}', False, (2, 48, 32))
    score_rect = score_surf.get_rect(center=(500, 60))
    pygame.draw.rect(screen, (58, 182, 201), score_rect)
    screen.blit(score_surf, score_rect)
    return current_time


def collisions(player, obstacles):
    if obstacles:
        for obstacle_rect in obstacles:
            if player.colliderect(obstacle_rect):
                return False
    return True


def player_animation():
    global plankton, player_index
    if plankton_rect.bottom < 300:
        plankton = player_walk_1
    else:
        player_index += 0.1
        if player_index >= len(player_walk):
            player_index = 0
        plankton = player_walk[int(player_index)]


def bird_animation():
    global bird, bird_fly_index
    bird_fly_index += 0.1
    if bird_fly_index >= len(bird_fly_list):
        bird_fly_index = 0
    bird = bird_fly_list[int(bird_fly_index)]


sky_surface = pygame.image.load('sky_fon1_1000x563.png').convert()

ground_surface = pygame.image.load('ground-png-hd.png')
ground_surface_rect = ground_surface.get_rect(center=(500, 400))

text_font = pygame.font.Font('Minecraft.ttf', 50)
text_surface = text_font.render('Pixel Runner', False, (2, 48, 32))
text_surface_rect = text_surface.get_rect(center=(500, 60))

text_surface2 = text_font.render('Press space to run', False, (2, 48, 32))
text_surface2_rect = text_surface.get_rect(center=(450, 400))


snail = pygame.image.load('snail.png').convert_alpha()
snail_rect = snail.get_rect(bottomright=(900, 325))

bird_fly_1 = pygame.transform.scale(pygame.image.load('bird1/frame_0_delay-0.08s-removebg-preview.png'), (237, 132))
bird_fly_2 = pygame.transform.scale(pygame.image.load('bird1/frame_1_delay-0.08s-removebg-preview.png'), (237, 132))
bird_fly_3 = pygame.transform.scale(pygame.image.load('bird1/frame_2_delay-0.08s-removebg-preview.png'), (237, 132))
bird_fly_4 = pygame.transform.scale(pygame.image.load('bird1/frame_3_delay-0.08s-removebg-preview.png'), (237, 132))
bird_fly_5 = pygame.transform.scale(pygame.image.load('bird1/frame_4_delay-0.08s-removebg-preview.png'), (237, 132))
bird_fly_6 = pygame.transform.scale(pygame.image.load('bird1/frame_5_delay-0.08s-removebg-preview.png'), (237, 132))
bird_fly_7 = pygame.transform.scale(pygame.image.load('bird1/frame_6_delay-0.08s-removebg-preview.png'), (237, 132))
bird_fly_list = [bird_fly_1, bird_fly_2, bird_fly_3, bird_fly_4, bird_fly_5, bird_fly_6, bird_fly_7]
bird_fly_index = 0
bird = bird_fly_list[bird_fly_index]
bird_rect = bird.get_rect(bottomright=(900, 200))
obstacle_rect_list = []

player_walk_1 = pygame.image.load('runing player 1.png').convert_alpha()
player_walk_2 = pygame.image.load('runing player 2.png').convert_alpha()
player_walk = [player_walk_1, player_walk_2]
player_index = 0
plankton = player_walk[player_index]
plankton_rect = plankton.get_rect(midbottom=(80, 325))
plankton_scale = pygame.transform.scale2x(plankton)
obstacle_timer = pygame.USEREVENT + 1
pygame.time.set_timer(obstacle_timer, 1600)

gravity_down = 0
start_time = 0
score = 0
game_active = False
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
        if game_active:
            if event.type == pygame.MOUSEBUTTONDOWN:
                if plankton_rect.collidepoint(event.pos):
                    if plankton_rect.bottom == 325:
                        gravity_down -= 24
            if event.type == pygame.KEYUP:
                if event.key == pygame.K_SPACE:
                    if plankton_rect.bottom == 325:
                        gravity_down -= 24
            if event.type == obstacle_timer:
                if randint(0, 2):
                    obstacle_rect_list.append(snail.get_rect(bottomright=(randint(1200, 1400), 325)))
                else:
                    obstacle_rect_list.append(bird.get_rect(bottomright=(randint(1200, 1400), 190)))

        else:
            if (event.type == pygame.KEYUP and event.key == pygame.K_SPACE) or event.type == pygame.MOUSEBUTTONDOWN:
                plankton_rect.left = 50
                start_time = pygame.time.get_ticks()
                game_active = True

    if game_active:
        screen.blit(sky_surface, (0, 0))
        screen.blit(ground_surface, ground_surface_rect)
        bird_animation()

        score = display_score()

        screen.blit(plankton, plankton_rect)
        player_animation()
        gravity_down += 1
        plankton_rect.y += gravity_down
        if plankton_rect.bottom > 325:
            gravity_down = 0
            plankton_rect.bottom = 325

        obstacle_rect_list = obstacle_movement(obstacle_rect_list)

        game_active = collisions(plankton_rect, obstacle_rect_list)

    else:
        screen.fill((58, 182, 201))
        screen.blit(plankton_scale, (440, 100))
        screen.blit(text_surface, text_surface_rect)
        score_message = text_font.render(f'Your score: {score}', False, (2, 48, 32))
        score_message_rect = score_message.get_rect(center=(500, 400))
        gravity_down = 0
        plankton_rect.midbottom = (80, 325)
        obstacle_rect_list.clear()
        if score == 0:
            screen.blit(text_surface2, text_surface2_rect)
        else:
            screen.blit(score_message, score_message_rect)

    pygame.display.update()
    clock.tick(60)
